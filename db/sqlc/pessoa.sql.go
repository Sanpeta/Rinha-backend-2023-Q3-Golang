// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: pessoa.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const countPessoas = `-- name: CountPessoas :one
SELECT COUNT(DISTINCT id) FROM pessoas
`

func (q *Queries) CountPessoas(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPessoas)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPessoa = `-- name: CreatePessoa :one
INSERT INTO pessoas (apelido, nome, nascimento, stack)
VALUES ($1, $2, $3, $4)
RETURNING id, apelido, nome, nascimento, stack
`

type CreatePessoaParams struct {
	Apelido    string   `json:"apelido"`
	Nome       string   `json:"nome"`
	Nascimento string   `json:"nascimento"`
	Stack      []string `json:"stack"`
}

func (q *Queries) CreatePessoa(ctx context.Context, arg CreatePessoaParams) (Pessoa, error) {
	row := q.db.QueryRowContext(ctx, createPessoa,
		arg.Apelido,
		arg.Nome,
		arg.Nascimento,
		pq.Array(arg.Stack),
	)
	var i Pessoa
	err := row.Scan(
		&i.ID,
		&i.Apelido,
		&i.Nome,
		&i.Nascimento,
		pq.Array(&i.Stack),
	)
	return i, err
}

const getPessoa = `-- name: GetPessoa :one
SELECT id, apelido, nome, nascimento, stack FROM pessoas WHERE id = $1
`

func (q *Queries) GetPessoa(ctx context.Context, id uuid.UUID) (Pessoa, error) {
	row := q.db.QueryRowContext(ctx, getPessoa, id)
	var i Pessoa
	err := row.Scan(
		&i.ID,
		&i.Apelido,
		&i.Nome,
		&i.Nascimento,
		pq.Array(&i.Stack),
	)
	return i, err
}

const getPessoas = `-- name: GetPessoas :many
SELECT id, apelido, nome, nascimento, stack FROM pessoas 
WHERE apelido LIKE '%' || $1 || '%'
OR nome LIKE '%' || $1 || '%'
OR stack @> ARRAY[$1]
LIMIT 50
`

func (q *Queries) GetPessoas(ctx context.Context, t sql.NullString) ([]Pessoa, error) {
	rows, err := q.db.QueryContext(ctx, getPessoas, t)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pessoa{}
	for rows.Next() {
		var i Pessoa
		if err := rows.Scan(
			&i.ID,
			&i.Apelido,
			&i.Nome,
			&i.Nascimento,
			pq.Array(&i.Stack),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
